#include <stdio.h>
#include<string.h>
#define MAX_SIZE 50

int F(char symbol)
{
    switch(symbol)
    {
        case '+':
        case '-': return 2;
        case '*':
        case '/':
        case '%': return 4;
        case '^':
        case '$': return 5;
        case '(': return 0;
        case '#': return -1;
        default: return 8;
        
        
        
    }
}
int G(char symbol)
{
    switch(symbol)
    {
         case '+':
        case '-': return 1;
        case '*':
        case '/':
        case '%': return 3;
        case '^':
        case '$': return 6;
        case '(': return 9;
        case ')': return 0;
        default: return 7;
    }
}
void push(char s[MAX_SIZE],int *top,char symbol)
{
    if(*top==MAX_SIZE)
    {
        printf("stack overflow\n");
    }
    else
    {
        (*top)++;
        s[*top]=symbol;
    }
}
char pop(char s[MAX_SIZE],int *top)
{
    char ele;
    if(*top==-1)
    {
        printf("underflow");
    }
   
        ele=s[*top];
        (*top)--;
        return ele;
    
}
void infix_to_postfix(char infix[10],char postfix[10])
{
    int i, j=0,n,top=-1;
    char s[MAX_SIZE],symbol;
    n=strlen(infix);
    push(s,&top,'#');
    for(i=0;i<n;i++)
    {
    symbol=infix[i];
    while(F(s[top])>G(symbol))
    {
        postfix[j++]=pop(s,&top);
        
        
    }
    if(F(s[top])!=G(symbol))
    {
        push(s,&top,symbol);
    }
    else
    {
        top--;
        
    }
    }
    while(s[top]!='#')
    {
        postfix[j]=pop(s,&top);
        j++;
    }
    postfix[j]='\0';
}    
int main()
{
    char  infix[10];
    char postfix[10];
    printf("enter the infix exp:");
    scanf("%s",infix);
   
    
    infix_to_postfix(infix,postfix);
    printf("result of postfix exp is %s",postfix);

    
    return 0;
}
